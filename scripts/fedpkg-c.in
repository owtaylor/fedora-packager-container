#!/bin/bash

set -e

# Escape entirely from the Flatpak sandbox
xdg_runtime_dir=${XDG_RUNTIME_DIR:-${XDG_CACHE_HOME:-$HOME/.cache}}
if [ -e $xdg_runtime_dir/flatpak-info ] ; then
    app=$HOME/.local/share/flatpak/app/org.fedoraproject.PackagerContainer/current/active/files
    exec /app/libexec/fedora-packager-container/run-host \
         --pty \
         --setenv datadir $app/share \
         $app/bin/fedpkg-c \
         $@
fi

podman="sudo podman"

name=fedora-packager-container
datadir="${datadir:-@DATADIR@}"
pkgdatadir="$datadir/$name"

xdg_config_home=${XDG_CONFIG_HOME:-$HOME/.config}
pkgconfigdir="$xdg_config_home/$name"

build() {
    sudo buildah bud -t $name $pkgdatadir/image
}

prompt() {
    abspath=false
    if [ "$1" = "--abspath" ] ; then
        abspath=true
        shift
    fi

    while true ; do
        newval="${!2}"
        read -e -p "$(echo -e '\001\033[1m\002')""$1""$(echo -e '\001\033[0m\002 ')""[$newval] " ans
        if [ "$ans" != "" ] ; then
            newval="$ans"
        fi

        ( ! $abspath || expr $newval : / > /dev/null ) && break
        echo "Must be an absolute path"
    done

    declare -g "$2=$newval"
}

configure() {
    fasusername="${fasusername:-$USER}"
    gitcheckoutdir="${gitcheckoutdir:-$HOME/fedora}"
    prompt "Fedora Accounts System username" fasusername
    prompt --abspath "Location of Fedora git checkouts" gitcheckoutdir
    gitcheckoutdir="${gitcheckoutdir%/}"

    [ -d pkgconfigdir ] || mkdir -p $pkgconfigdir
    cat > $pkgconfigdir/config.sh <<EOF
fasusername="$fasusername"
gitcheckoutdir="$gitcheckoutdir"
EOF

    if [ \! -d "$gitcheckoutdir" ] ; then
        echo "Creating $gitcheckoutdir"
        mkdir -p "$gitcheckoutdir"
    fi
}

destroy() {
    $podman rm -f $name
}

# https://github.com/containers/libpod/issues/1303
fix_mount_options() {
    $podman exec $name mount -o remount,dev /
}

# podman inserts bind mounts for resolv.conf, etc. We want these files
# to be symlinks to a directory maintained by flatpak-session-helper,
# so we need to unmount the bind mounts.
FIX_BIND_MOUNTS=\
'for f in localtime resolv.conf host.conf hosts timezone ; do '\
'   umount /etc/$f 2>/dev/null || : ; '\
'   ln -sf /run/host/monitor/$f /etc/$f ;'\
'done'

ensure_started() {
    # doesn't work - podman bug
    # current_image=$($podman inspect -t container --format="{{.Image}}" $name 2>/dev/null)

    current_image=$($podman inspect -t image --format="{{.Id}}" localhost/$name)
    container_image=$($podman inspect -t container $name 2>/dev/null | grep '"Image":' | head -n 1 | sed 's|.*"\(.*\)".*|\1|')

    if [[ "$container_image" != "" && "$container_image" != "$current_image" ]] ; then
        $podman rm -f $name
        container_image=
    fi

    if [[ "$container_image" != "" ]] ; then
        running=$($podman inspect -t container $name --format="{{.State.Running}}")
        if ! $running ; then
            # Make sure that flatpak-session-helper is running
            gdbus call \
                  -e -d org.freedesktop.Flatpak -o / -m org.freedesktop.DBus.Peer.Ping 1>/dev/null 2>/dev/null || \
                (echo "Can't contact flatpak-session-helper" 1>&2 && exit 1)

            $podman start $name
            fix_mount_options
        fi
    else
        # When the host has a /home => /var/home symlink, we set up the container
        if [[ "$(readlink /home)" == var/home ]] ; then
            need_home_link=true
        else
            need_home_link=false
        fi

        # Call flatpak-session-helper to get the path to the directory where flatpak
        # maintains updated versions of resolv.comf, etc. (This path is embedded into
        # the container, so it needs to be reasonably stable.)
        res=$(gdbus call \
                  -e -d org.freedesktop.Flatpak \
                  -o /org/freedesktop/Flatpak/SessionHelper \
                  -m org.freedesktop.Flatpak.SessionHelper.RequestSession || :)
        if [[ $res == "" ]] ; then
            echo "Can't contact flatpak-session-helper" 1>&2
            exit 1
        fi
        if [[ ! $res =~ "'path': <'"([^\']+) ]] ; then
            echo "Couldn't parse output from flatpak-session-helper" 1>&2
            exit 1
        fi
        monitor_path=${BASH_REMATCH[1]}

        auth_socket=/run/user/$(id -u)/keyring/ssh
        session_bus_socket=/run/user/$(id -u)/bus
        $podman run --name $name -d -v $HOME:$HOME \
                -v $auth_socket:$auth_socket -e SSH_AUTH_SOCK=$auth_socket \
                -v $session_bus_socket:$session_bus_socket -e DBUS_SESSION_BUS_ADDRESS=unix:path=$session_bus_socket \
                -v $monitor_path:/run/host/monitor \
                --net=host \
                --security-opt=label=disable \
                --privileged \
                -w $gitcheckoutdir localhost/$name \
                sleep 1000d

        $podman exec $name sh -c "$FIX_BIND_MOUNTS"

        if $need_home_link ; then
            $podman exec $name \
                sh -c 'rmdir /home && ln -s var/home /home'
        fi

        $podman exec $name /sbin/groupadd -g $(id -g) $(id -ng)
        $podman exec $name /sbin/useradd --home-dir=$HOME --no-create-home -g $(id -u) -G mock,wheel $(id -nu)
        $podman exec $name /usr/bin/passwd -d $(id -nu)
        $podman exec $name /usr/bin/passwd -d root

        mountdir=$(sudo podman mount $name)
        sudo sh -c "cat >> $mountdir/etc/module-build-service/config.py" <<EOF
LocalBuildConfiguration.DISTGITS = {
    'https://src.fedoraproject.org': ('fedpkg clone --anonymous {}',
                                     'fedpkg --release module sources'),
    'file://$gitcheckoutdir/rpms/': ('git clone file://$gitcheckoutdir/rpms/{0}; git -C {0} remote set-url origin ssh://$fasusername@pkgs.fedoraproject.org/rpms/{0}',
                                     'fedpkg --release module sources'),
    'file://$gitcheckoutdir/': ('git clone file://$gitcheckoutdir/{0}; git -C {0} remote set-url origin ssh://$fasusername@pkgs.fedoraproject.org/rpms/{0}',
                                'fedpkg --release module sources'),
}
EOF
        fix_mount_options
    fi
}

rootshell() {
    ensure_started

    $podman exec -t $name /bin/bash -l
}

shell() {
    ensure_started

    $podman exec -u $(id -u) -t $name capsh --caps="" -- -l -c 'exec $0 $@' bash --rcfile /usr/share/$name/bashrc
}

if [ -e $pkgconfigdir/config.sh ] ; then
    . $pkgconfigdir/config.sh
fi

if [ "$gitcheckoutdir" = "" -o "$fasusername" = "" ] ; then
    configure
    . $pkgconfigdir/config.sh
fi

case $1 in
    build)
        build
        ;;
    configure)
        configure
        ;;
    destroy)
        destroy
        ;;
    rootshell)
        rootshell
        ;;
    shell)
        shell
        ;;
    *)
        echo "Usage: fepdkg-c [shell|build|configure|destroy|rootshell]"
        exit 1
        ;;
esac
